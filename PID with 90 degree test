#include <Wire.h>
#include <VL53L0X.h>

// -------------------- PIN DEFINITIONS --------------------
// Motor pins
#define IN1 13
#define IN2 12
#define IN3 14
#define IN4 27
#define ENA 26
#define ENB 25

// IR sensor pins
#define IR_LEFT 34
#define IR_RIGHT 35

// Encoder pins
#define ENCA_A 4
#define ENCA_B 18
#define ENCB_A 19
#define ENCB_B 23

// LiDAR sensor
VL53L0X lidar;

// -------------------- ENCODER VARIABLES --------------------
volatile long pulseCountA = 0;  // For left encoder
volatile long pulseCountB = 0;  // For right encoder

// -------------------- PID VARIABLES --------------------
float Kp = 0.5;  // Proportional gain
float Ki = 0.0;  // Integral gain
float Kd = 0.0;  // Derivative gain

float pidIntegral = 0.0;
float lastError   = 0.0;

unsigned long pidInterval = 50; // Update PID every 50 ms
unsigned long lastPidTime  = 0; 

int baseSpeed = 90; // Lower base speed gives more room for correction (0–255)

// -------------------- FUNCTION PROTOTYPES --------------------
void IRAM_ATTR encoderAInterrupt();
void IRAM_ATTR encoderBInterrupt();
void IRAM_ATTR encoderCInterrupt();
void IRAM_ATTR encoderDInterrupt();

void moveForwardPID();
float computePidCorrection();
void stopMotors();
void turnLeft();      // Turn left (~180°) with increased turning degree
void turnRight();     // Turn right (~180°) with increased turning degree
void rightHandRuleAlgorithm(); // Optional right-hand rule algorithm

// -------------------- SETUP --------------------
void setup() {
  Serial.begin(115200);

  // Motor pins setup
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  // IR sensors setup
  pinMode(IR_LEFT, INPUT);
  pinMode(IR_RIGHT, INPUT);

  // Encoder pins setup
  pinMode(ENCA_A, INPUT);
  pinMode(ENCA_B, INPUT);
  pinMode(ENCB_A, INPUT);
  pinMode(ENCB_B, INPUT);

  // Attach interrupts for encoders
  attachInterrupt(digitalPinToInterrupt(ENCA_A), encoderAInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCA_B), encoderBInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCB_A), encoderCInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCB_B), encoderDInterrupt, CHANGE);

  // LiDAR setup
  Wire.begin();
  lidar.init();
  lidar.setTimeout(500);

  // Initialize PID timing
  lastPidTime = millis();
  
  Serial.println("Setup complete. Starting...");
}

// -------------------- MAIN LOOP --------------------
void loop() {
  // Read IR sensors (adjust HIGH/LOW if your sensor logic is reversed)
  bool irLeft = digitalRead(IR_LEFT);
  bool irRight = digitalRead(IR_RIGHT);

  // Get LiDAR distance in cm
  int distance = lidar.readRangeSingleMillimeters() / 10;

  // Debug output
  Serial.print("Left IR: ");
  Serial.print(irLeft);
  Serial.print(" | Right IR: ");
  Serial.print(irRight);
  Serial.print(" | LiDAR Distance: ");
  Serial.print(distance);
  Serial.print(" cm | EncA: ");
  Serial.print(pulseCountA);
  Serial.print(" | EncB: ");
  Serial.println(pulseCountB);

  // If obstacle is detected close ahead (~9 cm)
  if (distance < 9) {
    stopMotors();
    delay(500); // Brief pause

    // Turn based on IR sensor readings:
    // (Assuming HIGH means an obstacle is detected)
    if (irLeft == HIGH && irRight == LOW) {
      turnRight();  // Turn right
    } 
    else if (irLeft == LOW && irRight == HIGH) {
      turnLeft();   // Turn left
    } 
    else {
      // Default turn if both sensors are triggered (or both clear)
      turnRight();
    }
    delay(500); 
    stopMotors(); 
  } 
  else {
    // If no obstacle is detected, move forward with PID correction.
    moveForwardPID();
  }
  
  // Alternatively, you could use the right-hand rule algorithm:
  // rightHandRuleAlgorithm();
}

// -------------------- PID CONTROL FUNCTIONS --------------------

// Compute PID correction based on encoder differences.
float computePidCorrection() {
  // Compute elapsed time in seconds
  unsigned long now = millis();
  float dt = (float)(now - lastPidTime) / 1000.0;
  lastPidTime = now;

  // Capture encoder counts
  long countLeft  = pulseCountA; 
  long countRight = pulseCountB; 

  // Reset counts for the next PID interval
  pulseCountA = 0;  
  pulseCountB = 0;

  // Calculate error as the difference in pulses
  float error = (float)(countLeft - countRight);

  // Proportional term
  float pTerm = Kp * error;

  // Integral term
  pidIntegral += error * dt;
  float iTerm = Ki * pidIntegral;

  // Derivative term
  float derivative = (error - lastError) / dt;
  float dTerm = Kd * derivative;

  lastError = error;

  // Total correction
  float correction = pTerm + iTerm + dTerm;
  return correction;
}

// Move forward with PID speed adjustments.
void moveForwardPID() {
  static unsigned long lastCheck = 0;
  unsigned long now = millis();

  // Update only every pidInterval milliseconds
  if (now - lastCheck >= pidInterval) {
    lastCheck = now;
    float correction = computePidCorrection();

    // Adjust motor speeds based on the correction
    float leftSpeed  = baseSpeed - correction;
    float rightSpeed = baseSpeed + correction;

    // Constrain speeds between 0 and 255
    leftSpeed  = constrain(leftSpeed, 0, 255);
    rightSpeed = constrain(rightSpeed, 0, 255);

    // Set motor directions for forward motion
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);

    // Apply PWM to the motors
    analogWrite(ENA, (int)leftSpeed);
    analogWrite(ENB, (int)rightSpeed);
  }
}

// -------------------- BASIC MOTOR CONTROL --------------------
void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}

// Turn left (~180°) with a slightly increased turn angle.
void turnLeft() {
  // Left wheel forward, Right wheel backward
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);

  // Set moderate PWM speed
  analogWrite(ENA, 80);
  analogWrite(ENB, 80);

  // Increase delay to achieve a larger turn (adjust value as needed)
  delay(850);

  stopMotors();
}

// Turn right (~180°) with a slightly increased turn angle.
void turnRight() {
  // Left wheel backward, Right wheel forward
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);

  // Set moderate PWM speed
  analogWrite(ENA, 80);
  analogWrite(ENB, 80);

  // Increase delay to achieve a larger turn (adjust value as needed)
  delay(850);

  stopMotors();
}

// -------------------- ENCODER INTERRUPTS --------------------
void IRAM_ATTR encoderAInterrupt() {
  if (digitalRead(ENCA_B)) {
    pulseCountA++;
  } else {
    pulseCountA--;
  }
}

void IRAM_ATTR encoderBInterrupt() {
  if (digitalRead(ENCA_A)) {
    pulseCountA--;
  } else {
    pulseCountA++;
  }
}

void IRAM_ATTR encoderCInterrupt() {
  if (digitalRead(ENCB_B)) {
    pulseCountB++;
  } else {
    pulseCountB--;
  }
}

void IRAM_ATTR encoderDInterrupt() {
  if (digitalRead(ENCB_A)) {
    pulseCountB--;
  } else {
    pulseCountB++;
  }
}

// ------------------------------------------------------------
//   RIGHT-HAND-RULE ALGORITHM (OPTIONAL)
// ------------------------------------------------------------
/*
  This function demonstrates a "right-hand on the wall" method using the
  IR sensors and LiDAR to decide which way to turn.

  1) If there is no wall on the right, turn right.
  2) Else if there is no wall in front, move forward.
  3) Else if there is no wall on the left, turn left.
  4) Else, turn around (180°).
*/
void rightHandRuleAlgorithm() {
  bool wallOnLeft  = (digitalRead(IR_LEFT)  == HIGH);
  bool wallOnRight = (digitalRead(IR_RIGHT) == HIGH);

  int frontDist = lidar.readRangeSingleMillimeters() / 10;
  bool wallInFront = (frontDist < 10);

  if (!wallOnRight) {
    turnRight();
    return;
  }
  
  if (!wallInFront) {
    moveForwardPID();
    return;
  }
  
  if (!wallOnLeft) {
    turnLeft();
    return;
  }

  // If surrounded, perform a turnaround
  turnRight();
  delay(500);
  turnRight();
}
